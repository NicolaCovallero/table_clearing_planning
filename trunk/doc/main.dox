/*! \mainpage Table Clearing Planning Library

  \section Introduction 
  This library computes some simbolic predicates for clearing a table using task planning.

  Several classes and structures are defined. The principal one is CTableClearingPlanning.

  Note that there is another important class (EdgeProcessing), this class allows to 
  estimate the hidden sides with two different methods. It has been implemented for testing purposes,
  and at the end it is not used, despite this it is still included in the library for completeness.

  \subsection Pre-Requisites

  This package requires of the following libraries and packages
   - <A href="http://pointclouds.org/">PCL</A>, open project for 2D/3D image and point cloud processing.
   - <A href="https://github.com/flexible-collision-library/fcl">FCL</A>, Flexible Collision Detection library. 
   - <A href="http://opencv.org/">OpenCV</A>,  open source computer vision and machine learning software library (this only for the example).
   - <A href="https://gitlab.iri.upc.edu/perception/tos_supervoxels">tos_supervoxels</A> library. This is a simple library developed at IRI (based on the VCCS and LCCP segmentation algorithm of the PCL library) used only for the segmentation in the example file.
	 - <A href="http://www.cmake.org">cmake</A>, a cross-platform build system.
	 - <A href="http://www.doxygen.org">doxygen</a> and 
	   <A href="http://www.graphviz.org">graphviz</a> to generate the documentation.
         - stdc++, 
	 .
  
  Under linux all of these utilities are available in ready-to-use packages, except for FCL library you have to compile it from source.

  Under MacOS most of the packages are available via <a href="http://www.finkproject.org/">fink</a>. <br>

  \subsection Compilation

  Just download this package, uncompress it, and execute
   - cd build
   - cmake ..
   .
  to generate the makefile and then
   - make
   .
  to obtain the shared library (in this case called <em>iriutils.so</em>) and
  also all the example programs.

  The <em>cmake</em> only need to be executed once (make will automatically call
  <em>cmake</em> if you modify one of the <em>CMakeList.txt</em> files).

  To generate this documentation type
       - make doc
       .

  The files in the <em>build</em> directory are genetated by <em>cmake</em>
  and <em>make</em> and can be safely removed.
  After doing so you will need to call cmake manually again.

  \subsection Configuration

  The default build mode is DEBUG. That is, objects and executables 
  include debug information.

  The RELEASE build mode optimizes for speed. To build in this mode
  execute
      - cmake .. -DCMAKE_BUILD_TYPE=RELEASE
      .
  The release mode will be kept until next time cmake is executed.

  \subsection Installation

  In order to be able to use the library, it it necessary to copy it into the system.
  To do that, execute

      - make install
      .

  as root and the shared libraries will be copied to <em>/usr/local/lib/iriutils</em> directory
  and the header files will be copied to <em>/usr/local/include/iriutils</em> dierctory. At 
  this point, the library may be used by any user.

  To remove the library from the system, exceute
      - make uninstall
      .
  as root, and all the associated files will be removed from the system.

  \b IMPORTANT: To install the library follow this sequence of commands:

    - make
    - sudo make install (or make install)

  Do not compile and install at the same time, and BE SURE to not modify any files after the make command and before the make install command.

  \section Customization

  To build a new application using these library, first it is necessary to locate if the library
  has been installed or not using the following command

      - FIND_PACKAGE(table_clearing_planning REQUIRED)

  Then also the libraries it depends on have to be located:

      - FIND_PACKAGE(PCL 1.8 REQUIRED)
      - FIND_PACKAGE(fcl REQUIRED)
      - FIND_PACKAGE(OpenCV REQUIRED)

  In the case that the package is present, it is necessary to add the header files directory to
  the include directory path by using

      - INCLUDE_DIRECTORIES(${table_clearing_planning_INCLUDE_DIR})

  The same for its dependencies:

      - IF (PCL_FOUND)
      -   INCLUDE_DIRECTORIES(${PCL_INCLUDE_DIRS})
      -   LINK_DIRECTORIES(${PCL_LIBRARY_DIRS})
      -   ADD_DEFINITIONS(${PCL_DEFINITIONS})
      - ENDIF (PCL_FOUND) 
      - INCLUDE_DIRECTORIES(${fcl_INCLUDE_DIR} )

  Finally, it is also nevessary to link with the desired libraries, and its dependencies, by using the following command

      - TARGET_LINK_LIBRARIES(<executable name> ${table_clearing_planning_LIBRARY} ${PCL_LIBRARIES} ${fcl_LIBRARIES} ${OpenCV_LIBS})

  \section License

  This package is licensed under a  
  <a href="http://www.gnu.org/licenses/lgpl.html">
    LGPL 3.0 License</a>.

  \section Disclaimer

   This is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. 

 */
